import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id "com.github.sakata1222.jacoco-markdown" version "1.3.0"
    id "com.github.spotbugs" version "5.0.6"
    id "org.sonarqube" version "3.3"
    id 'maven-publish'
    id 'signing'
}
sonarqube {
    properties {
        property "sonar.projectKey", "sakata1222_expressionj"
        property "sonar.organization", "sakata1222-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
repositories {
    mavenCentral()
}
def libVersion = findProperty("libVersion") ?: "0.0.0"
def release = Boolean.valueOf(findProperty("release") ?: "false")
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.sakata1222'
            artifactId = 'expressionj'
            version = libVersion

            from components.java

            pom {
                name = 'ExpressionJ'
                description = 'Java library for supporting expressions'
                url = 'https://github.com/sakata1222/expressionj'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'sakata1222'
                        name = 'H.Sakata'
                        email = 'sakata1222@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git:////github.com/sakata1222/expressionj.git'
                    developerConnection = 'scm:git:git:////github.com/sakata1222/expressionj.git'
                    url = 'https://github.com/sakata1222/expressionj'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            if (release) {
                url = libVersion.endsWith('SNAPSHOT') ? snapshotsUrl : releasesUrl
                credentials {
                    username getProperty("ossrhUsername")
                    password getProperty("ossrhToken")
                }
            } else {
                url = project.rootDir.toPath().resolve("release_local").toAbsolutePath()
            }
        }
    }
}
signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    if (signingKeyId && signingKey) {
        def signingPassword = findProperty("signingPassword") ?: "dummy"
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(["--release", "8", "-Xlint:all", "-Werror"])
}
java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    testImplementation 'org.assertj:assertj-core:3.22.0'
}

testing {
    suites {
        test {
            useJUnitJupiter('5.8.1')
        }
    }
}
test {
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
}
tasks.withType(SpotBugsTask) {
    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }
    excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
}
jacocoTestReport {
    dependsOn test
    mustRunAfter test
    reports {
        xml.required = true
        html.required = true
    }
}
